// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain_service.proto

/*
Package blockrpc is a generated protocol buffer package.

It is generated from these files:
	blockchain_service.proto

It has these top-level messages:
	GetBestHeaderRequest
	GetBestHeaderResponse
	GetHeadersRequest
	GetHeadersResponse
	GetBlockRequest
	GetBlockResponse
*/
package blockrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wire "github.com/tclchiam/oxidize-go/wire"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetBestHeaderRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetBestHeaderRequest) Reset()                    { *m = GetBestHeaderRequest{} }
func (m *GetBestHeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBestHeaderRequest) ProtoMessage()               {}
func (*GetBestHeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetBestHeaderResponse struct {
	Header           *wire.BlockHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GetBestHeaderResponse) Reset()                    { *m = GetBestHeaderResponse{} }
func (m *GetBestHeaderResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBestHeaderResponse) ProtoMessage()               {}
func (*GetBestHeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetBestHeaderResponse) GetHeader() *wire.BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetHeadersRequest struct {
	LatestHash       []byte  `protobuf:"bytes,1,req,name=latestHash" json:"latestHash,omitempty"`
	LatestIndex      *uint64 `protobuf:"varint,2,req,name=latestIndex" json:"latestIndex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetHeadersRequest) Reset()                    { *m = GetHeadersRequest{} }
func (m *GetHeadersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHeadersRequest) ProtoMessage()               {}
func (*GetHeadersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetHeadersRequest) GetLatestHash() []byte {
	if m != nil {
		return m.LatestHash
	}
	return nil
}

func (m *GetHeadersRequest) GetLatestIndex() uint64 {
	if m != nil && m.LatestIndex != nil {
		return *m.LatestIndex
	}
	return 0
}

type GetHeadersResponse struct {
	HeaderCount      *uint32             `protobuf:"varint,1,req,name=headerCount" json:"headerCount,omitempty"`
	Headers          []*wire.BlockHeader `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetHeadersResponse) Reset()                    { *m = GetHeadersResponse{} }
func (m *GetHeadersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHeadersResponse) ProtoMessage()               {}
func (*GetHeadersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetHeadersResponse) GetHeaderCount() uint32 {
	if m != nil && m.HeaderCount != nil {
		return *m.HeaderCount
	}
	return 0
}

func (m *GetHeadersResponse) GetHeaders() []*wire.BlockHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type GetBlockRequest struct {
	Hash             []byte  `protobuf:"bytes,1,req,name=hash" json:"hash,omitempty"`
	Index            *uint64 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetBlockRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GetBlockRequest) GetIndex() uint64 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type GetBlockResponse struct {
	Block            *wire.Block `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *GetBlockResponse) Reset()                    { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()               {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetBlockResponse) GetBlock() *wire.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBestHeaderRequest)(nil), "blockrpc.GetBestHeaderRequest")
	proto.RegisterType((*GetBestHeaderResponse)(nil), "blockrpc.GetBestHeaderResponse")
	proto.RegisterType((*GetHeadersRequest)(nil), "blockrpc.GetHeadersRequest")
	proto.RegisterType((*GetHeadersResponse)(nil), "blockrpc.GetHeadersResponse")
	proto.RegisterType((*GetBlockRequest)(nil), "blockrpc.GetBlockRequest")
	proto.RegisterType((*GetBlockResponse)(nil), "blockrpc.GetBlockResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SyncService service

type SyncServiceClient interface {
	GetBestHeader(ctx context.Context, in *GetBestHeaderRequest, opts ...grpc.CallOption) (*GetBestHeaderResponse, error)
	GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
}

type syncServiceClient struct {
	cc *grpc.ClientConn
}

func NewSyncServiceClient(cc *grpc.ClientConn) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) GetBestHeader(ctx context.Context, in *GetBestHeaderRequest, opts ...grpc.CallOption) (*GetBestHeaderResponse, error) {
	out := new(GetBestHeaderResponse)
	err := grpc.Invoke(ctx, "/blockrpc.SyncService/GetBestHeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error) {
	out := new(GetHeadersResponse)
	err := grpc.Invoke(ctx, "/blockrpc.SyncService/GetHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := grpc.Invoke(ctx, "/blockrpc.SyncService/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SyncService service

type SyncServiceServer interface {
	GetBestHeader(context.Context, *GetBestHeaderRequest) (*GetBestHeaderResponse, error)
	GetHeaders(context.Context, *GetHeadersRequest) (*GetHeadersResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
}

func RegisterSyncServiceServer(s *grpc.Server, srv SyncServiceServer) {
	s.RegisterService(&_SyncService_serviceDesc, srv)
}

func _SyncService_GetBestHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBestHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetBestHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockrpc.SyncService/GetBestHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetBestHeader(ctx, req.(*GetBestHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockrpc.SyncService/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetHeaders(ctx, req.(*GetHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockrpc.SyncService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockrpc.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBestHeader",
			Handler:    _SyncService_GetBestHeader_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _SyncService_GetHeaders_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _SyncService_GetBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain_service.proto",
}

func init() { proto.RegisterFile("blockchain_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0xa5, 0xf9, 0xb5, 0x3f, 0xcb, 0xc4, 0xa2, 0x1d, 0xaa, 0xc4, 0x28, 0x35, 0xe6, 0x54, 0x11,
	0x22, 0x14, 0x3c, 0x79, 0xb2, 0x1e, 0xaa, 0x37, 0x49, 0xf1, 0x5c, 0xe2, 0x76, 0x20, 0x8b, 0x65,
	0x53, 0xb3, 0x5b, 0xff, 0x7c, 0x66, 0xbf, 0x84, 0x64, 0x77, 0x43, 0x37, 0x12, 0x6f, 0x99, 0xf7,
	0x5e, 0xde, 0xbc, 0x9d, 0x07, 0xc1, 0xcb, 0xba, 0x60, 0xaf, 0x2c, 0xcf, 0xb8, 0x58, 0x4a, 0x2a,
	0xdf, 0x39, 0xa3, 0x64, 0x53, 0x16, 0xaa, 0xc0, 0xbe, 0x66, 0xca, 0x0d, 0x0b, 0xa3, 0xa5, 0x46,
	0xae, 0x1d, 0x29, 0x09, 0xc5, 0x15, 0x27, 0x69, 0xb4, 0xf1, 0x31, 0x8c, 0xe6, 0xa4, 0x66, 0x24,
	0xd5, 0x03, 0x65, 0x2b, 0x2a, 0x53, 0x7a, 0xdb, 0x92, 0x54, 0xf1, 0x0c, 0x8e, 0x7e, 0xe1, 0x72,
	0x53, 0x08, 0x49, 0x78, 0x09, 0xff, 0x73, 0x8d, 0x04, 0x9d, 0xc8, 0x9b, 0xf8, 0xd3, 0x61, 0xf2,
	0xc1, 0x4b, 0x4a, 0x66, 0xd5, 0x06, 0x2b, 0xb5, 0x82, 0xf8, 0x19, 0x86, 0x73, 0xb2, 0xff, 0x4b,
	0x6b, 0x8c, 0x63, 0x80, 0x75, 0xa6, 0x2a, 0xdf, 0x4c, 0xe6, 0xda, 0x63, 0x3f, 0x75, 0x10, 0x8c,
	0xc0, 0x37, 0xd3, 0xa3, 0x58, 0xd1, 0x67, 0xe0, 0x45, 0xde, 0xa4, 0x9b, 0xba, 0x50, 0xcc, 0x00,
	0x5d, 0x5b, 0x9b, 0x2b, 0x02, 0xdf, 0xac, 0xbd, 0x2f, 0xb6, 0x42, 0x69, 0xe3, 0x41, 0xea, 0x42,
	0x78, 0x05, 0x7b, 0x66, 0x94, 0x81, 0x17, 0xfd, 0x6b, 0x8f, 0x5e, 0x2b, 0xe2, 0x5b, 0x38, 0xa8,
	0xde, 0x5f, 0x51, 0x75, 0x72, 0x84, 0x6e, 0xbe, 0xcb, 0xac, 0xbf, 0x71, 0x04, 0x3d, 0xee, 0xe4,
	0x34, 0x43, 0x7c, 0x03, 0x87, 0xbb, 0x9f, 0x6d, 0xbe, 0x0b, 0xe8, 0xe9, 0x16, 0xec, 0xd9, 0x7c,
	0x67, 0x77, 0x6a, 0x98, 0xe9, 0x77, 0x07, 0xfc, 0xc5, 0x97, 0x60, 0x0b, 0xd3, 0x26, 0x3e, 0xc1,
	0xa0, 0xd1, 0x01, 0x8e, 0x93, 0xba, 0xd9, 0xa4, 0xad, 0xb4, 0xf0, 0xfc, 0x4f, 0xde, 0x86, 0x98,
	0x03, 0xec, 0x4e, 0x87, 0xa7, 0x0d, 0x79, 0xb3, 0xa7, 0xf0, 0xac, 0x9d, 0xb4, 0x46, 0x77, 0xd0,
	0xaf, 0x5f, 0x88, 0x27, 0xcd, 0xad, 0xce, 0xc9, 0xc2, 0xb0, 0x8d, 0x32, 0x16, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x77, 0x31, 0x00, 0xc8, 0xc0, 0x02, 0x00, 0x00,
}
